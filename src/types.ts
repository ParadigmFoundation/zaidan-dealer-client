import { SignedOrder } from "@0x/types";

/**
 * Configuration options for the dealer client.
 */
export interface DealerOptions {
    /** Address to use to sign and fill orders. */
    takerAddress?: string;

    /** Ethereum JSONRPC provider url (server-side only) */
    providerUrl?: string;

    /** Optional gas price selector (fast, safeLow, etc.) */
    txPriority?: GasPriority;
}

/**
 * The base dealer response, fields present for all quotes (swap/bid/ask).
 */
export interface DealerResponse {
    /** The taker address which must fill the order (no other taker will be accepted). */
    takerAddress: string;

    /** The UNIX timestamp at which this offer expires. */
    expiration: number;

    /** The market symbol the quote is for */
    pair: string;

    /** The unique request ID that refers to this offer. */
    id: string;

    /** The price and order data for the quote. */
    price: number;

    /** The taker size, specified in the initial request. */
    size: number;

    /** The required fee from the dealer server. */
    fee: number;

    /** The signed maker order from the dealer server. */
    order: SignedOrder;
}

/**
 * The dealer's response for a swap quote (swap `n` of `Y` for equivalent amount of `Z`).
 */
export interface SwapResponse extends DealerResponse {
    /** The asset (ticker) the dealer will send to the client. */
    dealerAsset: string;

    /** The asset (ticker) the client will send to the dealer. */
    clientAsset: string;
}

/**
 * The dealer's response for a currency pair quote (bid/ask on X/Y pair).
 */
export interface QuoteResponse extends DealerResponse {
    /** The side of the quote (bid or ask). */
    side: string;
}

/**
 * Request body for dealer POST /order (submit fill) endpoint.
 */
export interface DealerFillTransaction {
    /** Salt used in signature generation. */
    salt: string;

    /** Raw hex-encoded fill transaction data. */
    data: string;

    /** 0x transaction hash (hash of data, etc.). */
    hash: string;

    /** Signature generated by signer (`address`) from signing fill transaction. */
    sig: string;

    /** The taker address (and signer). */
    address: string;

    /** Required UUID from initial quote (must match signed order). */
    quoteId: string;
}

/**
 * Gas price priority (as used in ETH Gas Station API).
 */
export type GasPriority = "safeLow" | "standard" | "fast" | "fastest";
